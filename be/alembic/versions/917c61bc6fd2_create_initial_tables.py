"""create initial tables

Revision ID: 917c61bc6fd2
Revises: 
Create Date: 2023-05-21 09:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql


# revision identifiers, used by Alembic.
revision = '917c61bc6fd2'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
        sa.Column('user_id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('username', sa.String(length=50), nullable=False),
        sa.Column('password_hash', sa.String(length=255), nullable=False),
        sa.Column('role', sa.Enum('admin', 'teacher', 'student', 'counselor', 'parent'), nullable=False),
        sa.Column('full_name', sa.String(length=100), nullable=False),
        sa.Column('email', sa.String(length=100), nullable=False),
        sa.Column('phone', sa.String(length=20), nullable=True),
        sa.Column('profile_picture', sa.String(length=255), nullable=True),
        sa.Column('account_status', sa.Enum('active', 'inactive', 'suspended'), server_default='active', nullable=True),
        sa.Column('last_login', sa.TIMESTAMP(), nullable=True),
        sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'), nullable=True),
        sa.PrimaryKeyConstraint('user_id'),
        sa.UniqueConstraint('email'),
        sa.UniqueConstraint('username')
    )
    
    op.create_table('subjects',
        sa.Column('subject_id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('subject_code', sa.String(length=20), nullable=False),
        sa.Column('subject_name', sa.String(length=100), nullable=False),
        sa.Column('subject_description', sa.Text(), nullable=True),
        sa.Column('department', sa.String(length=100), nullable=True),
        sa.Column('credits', sa.Integer(), nullable=False),
        sa.Column('credits_theory', sa.Float(), nullable=True),
        sa.Column('credits_practice', sa.Float(), nullable=True),
        sa.Column('prerequisite_subjects', sa.String(length=255), nullable=True),
        sa.Column('syllabus_link', sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint('subject_id'),
        sa.UniqueConstraint('subject_code')
    )
    
    op.create_table('students',
        sa.Column('student_id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('student_code', sa.String(length=20), nullable=False),
        sa.Column('date_of_birth', sa.Date(), nullable=True),
        sa.Column('gender', sa.Enum('male', 'female', 'other'), nullable=True),
        sa.Column('hometown', sa.String(length=100), nullable=True),
        sa.Column('current_address', sa.String(length=255), nullable=True),
        sa.Column('family_income_level', sa.Enum('very_low', 'low', 'medium', 'high', 'very_high'), nullable=True),
        sa.Column('family_background', sa.Text(), nullable=True),
        sa.Column('scholarship_status', sa.Enum('none', 'partial', 'full'), nullable=True),
        sa.Column('scholarship_amount', sa.Numeric(precision=10, scale=2), nullable=True),
        sa.Column('health_condition', sa.Text(), nullable=True),
        sa.Column('mental_health_status', sa.Text(), nullable=True),
        sa.Column('attendance_rate', sa.Float(), nullable=True, default=100.0),
        sa.Column('previous_academic_warning', sa.Integer(), nullable=True, default=0),
        sa.Column('academic_status', sa.Enum('good', 'warning', 'probation', 'suspended'), nullable=True, default='good'),
        sa.Column('entry_year', sa.Integer(), nullable=True),
        sa.Column('expected_graduation_year', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('student_id'),
        sa.UniqueConstraint('student_code'),
        sa.UniqueConstraint('user_id')
    )
    
    op.create_table('classes',
        sa.Column('class_id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('class_name', sa.String(length=50), nullable=False),
        sa.Column('class_description', sa.Text(), nullable=True),
        sa.Column('academic_year', sa.String(length=10), nullable=False),
        sa.Column('semester', sa.Enum('1', '2', 'summer'), nullable=False),
        sa.Column('department', sa.String(length=100), nullable=True),
        sa.Column('start_date', sa.Date(), nullable=True),
        sa.Column('end_date', sa.Date(), nullable=True),
        sa.Column('schedule', sa.JSON(), nullable=True),
        sa.Column('teacher_id', sa.Integer(), nullable=True),
        sa.Column('max_students', sa.Integer(), nullable=True),
        sa.Column('current_students', sa.Integer(), nullable=True, default=0),
        sa.ForeignKeyConstraint(['teacher_id'], ['users.user_id'], ondelete='SET NULL'),
        sa.PrimaryKeyConstraint('class_id')
    )
    
    op.create_table('dropout_risks',
        sa.Column('risk_id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('student_id', sa.Integer(), nullable=True),
        sa.Column('risk_percentage', sa.Float(), nullable=False),
        sa.Column('analysis_date', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('risk_factors', sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(['student_id'], ['students.student_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('risk_id')
    )
    
    op.create_table('disciplinary_records',
        sa.Column('record_id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('student_id', sa.Integer(), nullable=True),
        sa.Column('violation_description', sa.Text(), nullable=True),
        sa.Column('violation_date', sa.Date(), nullable=False),
        sa.Column('severity_level', sa.Enum('minor', 'moderate', 'severe'), nullable=False),
        sa.ForeignKeyConstraint(['student_id'], ['students.student_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('record_id')
    )
    
    op.create_table('class_students',
        sa.Column('class_id', sa.Integer(), nullable=False),
        sa.Column('student_id', sa.Integer(), nullable=False),
        sa.Column('enrollment_date', sa.Date(), server_default=sa.text('CURRENT_DATE'), nullable=True),
        sa.Column('status', sa.Enum('enrolled', 'dropped', 'completed'), server_default='enrolled', nullable=True),
        sa.ForeignKeyConstraint(['class_id'], ['classes.class_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['student_id'], ['students.student_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('class_id', 'student_id')
    )
    
    op.create_table('grades',
        sa.Column('grade_id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('student_id', sa.Integer(), nullable=True),
        sa.Column('subject_id', sa.Integer(), nullable=True),
        sa.Column('class_id', sa.Integer(), nullable=True),
        sa.Column('assignment_score', sa.Float(), nullable=True),
        sa.Column('midterm_score', sa.Float(), nullable=True),
        sa.Column('final_score', sa.Float(), nullable=True),
        sa.Column('gpa', sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(['class_id'], ['classes.class_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['student_id'], ['students.student_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['subject_id'], ['subjects.subject_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('grade_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('grades')
    op.drop_table('class_students')
    op.drop_table('disciplinary_records')
    op.drop_table('dropout_risks')
    op.drop_table('classes')
    op.drop_table('students')
    op.drop_table('subjects')
    op.drop_table('users')
    # ### end Alembic commands ###
